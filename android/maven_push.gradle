apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

Properties properties = new Properties()
File localPropertiesFile = project.file("maven_push.properties");
if(localPropertiesFile.exists()){
    properties.load(localPropertiesFile.newDataInputStream())
}

def packageName = properties.getProperty("groupId")
def libraryVersion = properties.getProperty("version")
def libraryName = properties.getProperty("artifactId")
def artifactoryContextUrl = properties.getProperty("artifactoryContextUrl")
def artifactoryRepoKey = properties.getProperty("artifactoryRepoKey")
def artifactoryUsername = properties.getProperty("artifactoryUsername")
def artifactoryPassword = properties.getProperty("artifactoryPassword")

publishing {
  publications {
    aar(MavenPublication) {
      groupId packageName
      version libraryVersion
      artifactId libraryName

      // Tell maven to prepare the generated "*.aar" file for publishing
      artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
    }
  }
}

artifactory {
  contextUrl = artifactoryContextUrl
  publish {
    repository {
      // The Artifactory repository key to publish to
      repoKey = artifactoryRepoKey

      username = artifactoryUsername
      password = artifactoryPassword
    }
    defaults {
      // Tell the Artifactory Plugin which artifacts should be published to Artifactory.
      publications('aar')
      publishArtifacts = true

      // Properties to be attached to the published artifacts.
      properties = ['qa.level': 'basic', 'dev.team': 'core']
      // Publish generated POM files to Artifactory (true by default)
      publishPom = true
    }
  }
}

task generateSourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier 'sources'
}

artifactoryPublish.dependsOn assembleRelease, generateSourcesJar
